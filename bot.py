import asyncio
import os
import random

from memory import *
from aiogram import Bot, Dispatcher, Router, types
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv

load_dotenv()

# ======== Keyboards ========

settings_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='–í—ã–±—Ä–∞—Ç—å –∏–º—è', callback_data='name')],
    [InlineKeyboardButton(text='–ó–∞–ø–æ–º–Ω–∏—Ç—å', callback_data='remember')],
    [InlineKeyboardButton(text='–í—Å–ø–æ–º–Ω–∏—Ç—å', callback_data='recall')],
    [InlineKeyboardButton(text='–ó–∞–±—ã—Ç—å', callback_data='forget')]
])

dev_keyboard = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text='Roll a die')],
    [KeyboardButton(text='info')],
    [KeyboardButton(text='Settings')],
    [KeyboardButton(text='Feedback')],
    [KeyboardButton(text='Reminder (no)'), KeyboardButton(text='Cats! (later)')],
    [KeyboardButton(text='What is my name? (changed)'), KeyboardButton(text='–î–æ–º–∏–∫ (was good)')]
], resize_keyboard=True)

keyboard = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text='–ö—É–±–∏–∫')],
    [KeyboardButton(text='info'), KeyboardButton(text='–û—Ç–∑—ã–≤')],
    [KeyboardButton(text='–ù–∞—Å—Ç—Ä–æ–π–∫–∏')],
], resize_keyboard=True)

# ======== Config ========

api_token_muziatikbot = os.getenv("API_TOKEN_muziatikBot")

try:
    MY_CHAT_ID = int(os.getenv('MY_CHAT_ID'))
except TypeError as e:
    print(f'–ö–ª—é—á–∞ —Ç–∞ –Ω–µ—Ç... :\n{e}')

router = Router()
keyboard_input = {}


# ======== Helper ========

async def send_typing_indicator(chat_id, bot, wait=1):
    dots = await bot.send_message(chat_id, "...")
    await asyncio.sleep(wait)
    await bot.delete_message(chat_id, dots.message_id)


# ======== Handlers ========

@router.message(Command('start'))
async def start_bot(message: Message):
    await send_typing_indicator(message.chat.id, message.bot)
    await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —è **MuziatikBot**.", parse_mode="Markdown")
    await asyncio.sleep(1)
    user_name = get_data(message.from_user.id, "name")
    if not user_name:
        await message.answer('–î–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è!')
    else:
        await message.answer(f'–û! –Ø –≤–∞—Å –ø–æ–º–Ω—é! –í—ã {user_name}')
    await message.answer(
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ _–∫–Ω–æ–ø–∫—É_ –≤–Ω–∏–∑—É, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ–±–æ –º–Ω–µ.",
        parse_mode="Markdown",
        reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text='info')]], resize_keyboard=True)
    )


@router.message(lambda msg: msg.text == 'info')
async def info(message: Message, bot: Bot):
    await message.reply_sticker('CAACAgIAAxkBAAEz-itoBW_hmrk-'
                                '933qZ43mWlN1MK_QjAACsQ8AAldGSEutS54Fv2EAAe42BA')
    await asyncio.sleep(3)
    await message.reply(
        f'–í–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ MuziatikBot, {get_data(message.from_user.id, 'name')}:\n'
        '–í–µ—Ä—Å–∏—è ‚Äî 2.0üÜïüéâüòé\n'
        '–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–π: –í—ã–±—Ä–∞—Ç—å –∏–º—è ‚Äî –ü–æ–ª–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å,\n'
        '–ö—É–±–∏–∫ ‚Äî –ø–æ–ª–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å.\n'
        '–û—Ç–∑—ã–≤üÜï: –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –ø—Ä–æ –±–æ—Ç–∞!'
        '–ü–∞–º—è—Ç—åüß†: –ü—É–±–ª–∏—á–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä',
        reply_markup=keyboard
    )


@router.message(lambda msg: "–ö—É–±–∏–∫" in msg.text or 'die' in msg.text)
async def dice(message: Message, bot: Bot):
    inline_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="–ë—Ä–æ—Å—å –∫—É–±–∏–∫ (—Å—Ç–∏–∫–µ—Ä)", callback_data="roll_dice")],
        [InlineKeyboardButton(
            text='–°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ (—Ç–µ–∫—Å—Ç)', callback_data='text_dice')]
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:", reply_markup=inline_keyboard)


@router.callback_query(lambda c: c.data == 'roll_dice')
async def roll_dice(callback_query: types.CallbackQuery, bot: Bot):
    await bot.send_dice(callback_query.from_user.id)
    await asyncio.sleep(4)
    await callback_query.answer()


@router.callback_query(lambda c: c.data == "text_dice")
async def text_dice(callback_query: types.CallbackQuery, bot: Bot):
    dice_result = random.randint(1, 6)
    await send_typing_indicator(callback_query.from_user.id, bot)
    await bot.send_message(callback_query.from_user.id, f"–í—ã–ø–∞–ª–æ: {dice_result}")
    await callback_query.answer(f"–í—ã–ø–∞–ª–æ: {dice_result}", show_alert=True)


@router.message(lambda msg: msg.text in ['–ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'Settings'])
async def settings(message: Message):
    global sett
    sett = await message.reply('–í–æ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', reply_markup=settings_keyboard,
                               parse_mode="Markdown")


@router.callback_query(lambda c: c.data == 'name')
async def choose_name(callback_query: types.CallbackQuery, bot: Bot):
    await sett.edit_text('–ö–∞–∫ –≤–∞—Å –Ω–∞–∑—ã–≤–∞—Ç—å?')
    await callback_query.answer()
    await asyncio.sleep(1)
    await bot.edit_message_reply_markup(
        chat_id=sett.chat.id,
        message_id=sett.message_id,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='–§–ò', callback_data='full_name'),
             InlineKeyboardButton(text='–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', callback_data='username')],
            [InlineKeyboardButton(text='–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é', callback_data='keyboard_input')],
        ])
    )


@router.callback_query(lambda c: c.data in ['full_name', 'username', 'keyboard_input'])
async def set_name(callback_query: types.CallbackQuery, bot: Bot):
    if callback_query.data == 'full_name':
        name = callback_query.from_user.full_name
        save_data(callback_query.from_user.id, "name", name)
        await callback_query.answer(f'–•–æ—Ä–æ—à–æ, {name}')
        # await bot.send_message(callback_query.message.chat.id, f'–•–æ—Ä–æ—à–æ, {name}')
    elif callback_query.data == 'username':
        name = callback_query.from_user.username
        save_data(callback_query.from_user.id, "name", name)
        await callback_query.answer(f'–•–æ—Ä–æ—à–æ, {name}')
        # await bot.send_message(callback_query.message.chat.id, f'–•–æ—Ä–æ—à–æ, {name}')
    else:
        await send_typing_indicator(callback_query.message.chat.id, bot)
        keyboard_input[callback_query.from_user.id] = 'name'
        await callback_query.answer('–•–æ—Ä–æ—à–æ, –ø–∏—à–∏—Ç–µ', show_alert=True)
        # await bot.send_message(callback_query.message.chat.id, '–•–æ—Ä–æ—à–æ, –ø–∏—à–∏—Ç–µ')


@router.callback_query(lambda c: c.data == 'remember' or c.data == 'recall' or c.data == 'forget')
async def memory(callback_query: types.CallbackQuery):
    if callback_query.data == 'remember':
        await callback_query.answer('–ü—Ä–∞–≤–∏–ª–∞: –ö–ª—é—á –ø–∏—Å–∞—Ç—å –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤, –∑–∞—Ç–µ–º –ø—Ä–æ–±–µ–ª –∏ –∑–Ω–∞—á–µ–Ω–∏–µ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤',
                                    show_alert=True)
        keyboard_input[callback_query.from_user.id] = 'remember'
        await callback_query.message.answer('–ü—Ä–∏–º–µ—Ä:\n—Ü–≤–µ—Ç –≥–æ–ª—É–±–æ–π'
                                            '\n–ø–æ–∫—É–ø–∫–∏ –≥–æ–ª—É–±–∏–∫–∞_–∫–ª—É–±–Ω–∏–∫–∞_–ø–æ–º–∏–¥–æ—Ä—ã')

    elif callback_query.data == 'recall':
        await callback_query.answer('–í—Å–ø–æ–º–∏–Ω–∞—é...')
        asyncio.create_task(send_typing_indicator(callback_query.message.chat.id, callback_query.bot))
        await callback_query.message.answer(
            '\n'.join(f'{"–ò–º—è" if key == "name" else key}: {value}' for key, value in
                      get_data(callback_query.from_user.id).items()))

    else:
        keyboard_input[callback_query.from_user.id] = 'forget'
        await callback_query.answer('–•–æ—Ä–æ—à–æ')
        await callback_query.message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –∫–ª—é—á –æ–±—ä–µ–∫—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å')
        await callback_query.message.answer('–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–í—Å—ë"')
        await send_typing_indicator(callback_query.message.chat.id, callback_query.bot, wait=3)
        await callback_query.message.answer('–ê –µ—Å–ª–∏ –≤—ã –∑–∞–±—ã–ª–∏ –∫–ª—é—á, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–í—Å–ø–æ–º–Ω–∏—Ç—å"')


@router.message(lambda msg: msg.text == 'dev')
async def dev(message: Message):
    await send_typing_indicator(message.chat.id, message.bot, wait=2)
    await message.reply('–ü—Ä–æ–≤–µ—Ä—è—é')
    await send_typing_indicator(message.chat.id, message.bot, wait=3)
    if message.from_user.id == MY_CHAT_ID or message.from_user.id == os.getenv('DADDY_CHAT_ID'):
        await message.reply('Okei-dokei', reply_markup=dev_keyboard)
    else:
        await message.reply('–í—ã –Ω–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫')


@router.message(lambda msg: msg.text == '–û—Ç–∑—ã–≤' or msg.text == 'Feedback')
async def feedback(message: Message):
    global keyboard_input
    keyboard_input[message.from_user.id] = 'feedback'
    await send_typing_indicator(message.chat.id, message.bot)
    await message.reply('_–ù–∞–ø–∏—à–∏—Ç–µ_ –í–∞—à –æ—Ç–∑—ã–≤ (–±–µ—Ç–∞ –≤–µ—Ä—Å–∏—è)', parse_mode="Markdown")


@router.message()
async def everything(message: Message, bot: Bot):
    if keyboard_input.get(message.from_user.id) == 'name':
        save_data(message.from_user.id, "name", message.text)
        del keyboard_input[message.from_user.id]
        await message.answer(f'–ó–∞–ø–æ–º–Ω–∏–ª! –¢–µ–ø–µ—Ä—å –≤—ã ‚Äî {message.text}')
    elif keyboard_input.get(message.from_user.id) == 'feedback':
        await message.answer('–ü–∏—à—É –º–æ–µ–º—É —Å–æ–∑–¥–∞—Ç–µ–ª—é')
        await send_typing_indicator(message.from_user.id, bot)
        await bot.send_message(MY_CHAT_ID, f'–≠–π, –±—Ä–æ —É —Ç–µ–±—è –æ—Ç–∑—ã–≤.\n{message.text}')
        await message.reply('–ù–∞–ø–∏—Å–∞–ª')
        await send_typing_indicator(message.from_user.id, bot)
        await message.answer('–ö—Å—Ç–∞—Ç–∏, —Å–∫–æ—Ä–æ —É –æ—Ç–∑—ã–≤–æ–≤ –±—É–¥—É—Ç —Å–≤–æ–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ãüîú')
        del keyboard_input[message.from_user.id]
    elif keyboard_input.get(message.from_user.id) == 'remember':
        asyncio.create_task(send_typing_indicator(message.chat.id, bot, wait=3))
        if len(message.text.split()) == 2:
            save_data(message.from_user.id, message.text.split()[0], message.text.split()[1])
            await message.answer(f'–ó–∞–ø–æ–º–Ω–∏–ª!\n'
                                 f'{message.text.split()[0]} ‚Äî {message.text.split()[1]}')
        else:
            await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–æ–≤–Ω–æ –¥–≤–∞ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª')
        del keyboard_input[message.from_user.id]
    elif keyboard_input.get(message.from_user.id) == 'forget':
        asyncio.create_task(send_typing_indicator(message.chat.id, bot, wait=2))
        del keyboard_input[message.from_user.id]
        if message.text.lower() == '–≤—Å—ë' or message.text.lower() == '–≤—Å–µ':
            delete_data(message.from_user.id)
            await message.reply('–£–¥–∞–ª–∏–ª –≤–∞—Å –∏–∑ –±–∞–∑—ãü•∏')
            return
        if message.text.lower() not in get_data(message.from_user.id):
            await message.answer('–¢–∞–∫–æ–≥–æ –∫–ª—é—á–∞ –Ω–µ—Ç')
            return
        delete_data(message.from_user.id, message.text)
        await message.answer(f'–£–¥–∞–ª–∏–ª –∫–ª—é—á {message.text} –∏ –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ')

    else:
        await message.reply(
            '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞), –∞ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç: –Ω–∞–∂–º–∏—Ç–µ 4 –∫–≤–∞–¥—Ä–∞—Ç–∞ —Å–ª–µ–≤–∞ –æ—Ç —Å–∫—Ä–µ–ø–∫–∏')


# ======== Main ========

async def main():
    bot = Bot(api_token_muziatikbot)
    dp = Dispatcher()
    dp.include_router(router)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
