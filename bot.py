import asyncio
import os
import random
import time

from memory import get_data, save_data, delete_data
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, \
    InlineQueryResultArticle, InputTextMessageContent, LabeledPrice
from dotenv import load_dotenv
from pydub import AudioSegment
import speech_recognition as sr


def _transcribe_wav(path: str, language: str = 'ru-RU') -> str:
    r = sr.Recognizer()
    with sr.AudioFile(path) as source:
        audio_data = r.record(source)
    return r.recognize_google(audio_data, language=language)


load_dotenv()

# ======== Keyboards ========

settings_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='–í—ã–±—Ä–∞—Ç—å –∏–º—è', callback_data='name')],
    [InlineKeyboardButton(text='–î–æ–Ω–∞—Ç', callback_data='donate')]
])
memory_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='–ó–∞–ø–æ–º–Ω–∏—Ç—å', callback_data='remember')],
    [InlineKeyboardButton(text='–í—Å–ø–æ–º–Ω–∏—Ç—å', callback_data='recall')],
    [InlineKeyboardButton(text='–ó–∞–±—ã—Ç—å', callback_data='forget')]
])
dev_keyboard = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text='Roll a die')],
    [KeyboardButton(text='info')],
    [KeyboardButton(text='Settings')],
    [KeyboardButton(text='Memory')],
    [KeyboardButton(text='Feedback')],
    [KeyboardButton(text='Reminder (no)'), KeyboardButton(text='Cats! (later)')],
    [KeyboardButton(text='What is my name? (changed)'), KeyboardButton(text='–î–æ–º–∏–∫ (was good)')]
], resize_keyboard=True)

keyboard = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text='–ö—É–±–∏–∫')],
    [KeyboardButton(text='info'), KeyboardButton(text='–û—Ç–∑—ã–≤')],
    [KeyboardButton(text='–ü–∞–º—è—Ç—å')],
    [KeyboardButton(text='–ù–∞—Å—Ç—Ä–æ–π–∫–∏')],
], resize_keyboard=True)

# ======== Config ========

api_token_muziatikbot = os.getenv("API_TOKEN_muziatikBot")

try:
    MY_CHAT_ID = int(os.getenv('MY_CHAT_ID'))
except TypeError as e:
    print(f'–ö–ª—é—á–∞ —Ç–∞ –Ω–µ—Ç... :\n{e}')

router = Router()
keyboard_input = {}


# ======== Helper ========

async def send_typing_indicator(chat_id, bot, wait=1):
    dots = await bot.send_message(chat_id, "...")
    await asyncio.sleep(wait)
    await bot.delete_message(chat_id, dots.message_id)


# ======== Handlers ========

@router.message(Command('start'))
async def start_bot(message: Message):
    await send_typing_indicator(message.chat.id, message.bot)
    await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —è **MuziatikBot**.", parse_mode="Markdown")
    await asyncio.sleep(1)
    user_name = get_data(message.from_user.id, "name")
    if not user_name:
        await message.answer('–î–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è!')
    else:
        await message.answer(f'–û! –Ø –≤–∞—Å –ø–æ–º–Ω—é! –í—ã {user_name}')
    await message.answer(
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ _–∫–Ω–æ–ø–∫—É_ –≤–Ω–∏–∑—É, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ–±–æ –º–Ω–µ.",
        parse_mode="Markdown",
        reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text='info')]], resize_keyboard=True)
    )


@router.message(lambda msg: msg.text == 'info')
async def info(message: Message, bot: Bot):
    await message.reply_sticker('CAACAgIAAxkBAAEz-itoBW_hmrk-'
                                '933qZ43mWlN1MK_QjAACsQ8AAldGSEutS54Fv2EAAe42BA')
    await asyncio.sleep(3)
    # Prefetch the user's name off the event loop, with a fallback
    name = await asyncio.to_thread(get_data, message.from_user.id, "name") or "–≥–æ—Å—Ç—å"
    await message.reply(
        f"–í–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ MuziatikBot, {name}:\n"
        "–í–µ—Ä—Å–∏—è ‚Äî 2.6.4\n"
        "–û–ø–∏—Å–∞–Ω–∏–µ: –ù–∞—á–∏–Ω–∞—è —Å –≤–µ—Ä—Å–∏–∏ 2.0, –±–æ—Ç —Å—Ç–∞–ª –ø–æ–ª–µ–∑–Ω—ã–º –≤ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π –∂–∏–∑–Ω–∏.\n"
        "–í–æ—Ç –º–æ–∏ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
        "–í—ã–±—Ä–∞—Ç—å –∏–º—è ‚Äî –ü–æ–ª–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å.\n"
        "–ö—É–±–∏–∫ ‚Äî –ø–æ–ª–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å.\n"
        "–û—Ç–∑—ã–≤üÜï: –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –ø—Ä–æ –±–æ—Ç–∞!\n"
        "*–ü–∞–º—è—Ç—å*üß†: *–ü–æ–ª–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å*.\n"
        "*–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–µ–∫—Å—Ç*:\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —è –µ–≥–æ —Ä–∞—Å—à–∏—Ñ—Ä—É—é\n"
        "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ 10 –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –Ω–µ–¥–µ–ª—é, "
        "–¥–∞–ª–µ–µ 5 –∑–≤—ë–∑–¥ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ > –î–æ–Ω–∞—Ç: *–ù–µ –¥–∞—ë—Ç –ø—Ä–∏–≤–∏–ª–µ–≥–∏—è*: –∑–∞–ø–ª–∞—Ç–∏—Ç–µ 10 –∑–≤—ë–∑–¥ —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ @muziatikBot –≤ –ª—é–±–æ–º –¥—Ä—É–≥–æ–º —á–∞—Ç–µ —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —ç–º–æ–¥–∑–∏",
        parse_mode='Markdown', reply_markup=keyboard
    )


@router.message(lambda msg: msg.text == "–ö—É–±–∏–∫" or msg.text == 'Roll a die')
async def dice(message: Message, bot: Bot):
    inline_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="–ë—Ä–æ—Å—å –∫—É–±–∏–∫ (—Å—Ç–∏–∫–µ—Ä)", callback_data="roll_dice")],
        [InlineKeyboardButton(
            text='–°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ (—Ç–µ–∫—Å—Ç)', callback_data='text_dice')]
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:", reply_markup=inline_keyboard)


@router.callback_query(lambda c: c.data == 'roll_dice')
async def roll_dice(callback_query: types.CallbackQuery, bot: Bot):
    await bot.send_dice(callback_query.from_user.id)
    await asyncio.sleep(4)
    await callback_query.answer()


@router.callback_query(lambda c: c.data == "text_dice")
async def text_dice(callback_query: types.CallbackQuery, bot: Bot):
    dice_result = random.randint(1, 6)
    await send_typing_indicator(callback_query.from_user.id, bot)
    await bot.send_message(callback_query.from_user.id, f"–í—ã–ø–∞–ª–æ: {dice_result}")
    await callback_query.answer(f"–í—ã–ø–∞–ª–æ: {dice_result}", show_alert=True)


@router.message(lambda msg: msg.text == 'Memory' or msg.text == '–ü–∞–º—è—Ç—å')
async def memory_menu(message: Message):
    await message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–∞–º—è—Ç—å—é', reply_markup=memory_keyboard)


@router.message(lambda msg: msg.text in ['–ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'Settings'])
async def settings(message: Message):
    await message.reply('–í–æ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', reply_markup=settings_keyboard,
                        parse_mode="Markdown")


@router.callback_query(lambda c: c.data == 'name')
async def choose_name(callback_query: types.CallbackQuery, bot: Bot):
    await callback_query.message.edit_text('–ö–∞–∫ –≤–∞—Å –Ω–∞–∑—ã–≤–∞—Ç—å?')
    await callback_query.answer()
    await asyncio.sleep(1)
    await bot.edit_message_reply_markup(
        chat_id=callback_query.from_user.id,
        message_id=callback_query.message.message_id,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='–§–ò', callback_data='full_name'),
             InlineKeyboardButton(text='–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', callback_data='username')],
            [InlineKeyboardButton(text='–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é', callback_data='keyboard_input')],
        ])
    )


@router.callback_query(lambda c: c.data in ['full_name', 'username', 'keyboard_input'])
async def set_name(callback_query: types.CallbackQuery, bot: Bot):
    if callback_query.data == 'full_name':
        name = callback_query.from_user.full_name
        save_data(callback_query.from_user.id, "name", name)
        await callback_query.answer(f'–•–æ—Ä–æ—à–æ, {name}')
        # await bot.send_message(callback_query.message.chat.id, f'–•–æ—Ä–æ—à–æ, {name}')
    elif callback_query.data == 'username':
        name = callback_query.from_user.username
        save_data(callback_query.from_user.id, "name", name)
        await callback_query.answer(f'–•–æ—Ä–æ—à–æ, {name}')
        # await bot.send_message(callback_query.message.chat.id, f'–•–æ—Ä–æ—à–æ, {name}')
    else:
        await send_typing_indicator(callback_query.message.chat.id, bot)
        keyboard_input[callback_query.from_user.id] = 'name'
        await callback_query.answer('–•–æ—Ä–æ—à–æ, –ø–∏—à–∏—Ç–µ', show_alert=True)
        # await bot.send_message(callback_query.message.chat.id, '–•–æ—Ä–æ—à–æ, –ø–∏—à–∏—Ç–µ')


@router.callback_query(lambda c: c.data == 'remember' or c.data == 'recall' or c.data == 'forget')
async def memory(callback_query: types.CallbackQuery):
    if callback_query.data == 'remember':
        await callback_query.answer('–ü—Ä–∞–≤–∏–ª–∞: –ö–ª—é—á –ø–∏—Å–∞—Ç—å –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤, –∑–∞—Ç–µ–º –ø—Ä–æ–±–µ–ª –∏ –∑–Ω–∞—á–µ–Ω–∏–µ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤',
                                    show_alert=True)
        keyboard_input[callback_query.from_user.id] = 'remember'
        await callback_query.message.answer('–ü—Ä–∏–º–µ—Ä:\n—Ü–≤–µ—Ç –≥–æ–ª—É–±–æ–π'
                                            '\n–ø–æ–∫—É–ø–∫–∏ –≥–æ–ª—É–±–∏–∫–∞_–∫–ª—É–±–Ω–∏–∫–∞_–ø–æ–º–∏–¥–æ—Ä—ã')

    elif callback_query.data == 'recall':
        await callback_query.answer('–í—Å–ø–æ–º–∏–Ω–∞—é...')
        asyncio.create_task(send_typing_indicator(callback_query.message.chat.id, callback_query.bot))
        await callback_query.message.answer(
            '\n'.join(f'{"–ò–º—è" if key == "name" else key}: {value}' for key, value in
                      get_data(callback_query.from_user.id).items()))

    else:
        keyboard_input[callback_query.from_user.id] = 'forget'
        await callback_query.answer('–•–æ—Ä–æ—à–æ')
        await callback_query.message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –∫–ª—é—á –æ–±—ä–µ–∫—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å')
        await callback_query.message.answer('–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–í—Å—ë"')
        await send_typing_indicator(callback_query.message.chat.id, callback_query.bot, wait=3)
        await callback_query.message.answer('–ê –µ—Å–ª–∏ –≤—ã –∑–∞–±—ã–ª–∏ –∫–ª—é—á, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–í—Å–ø–æ–º–Ω–∏—Ç—å"')


@router.message(lambda msg: msg.text == 'dev')
async def dev(message: Message):
    await send_typing_indicator(message.chat.id, message.bot, wait=2)
    await message.reply('–ü—Ä–æ–≤–µ—Ä—è—é')
    await send_typing_indicator(message.chat.id, message.bot, wait=3)
    if message.from_user.id == MY_CHAT_ID or message.from_user.id == os.getenv('DADDY_CHAT_ID'):
        await message.reply('Okei-dokei', reply_markup=dev_keyboard)
    else:
        await message.reply('–í—ã –Ω–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫')


@router.callback_query(F.data == 'donate')
async def donate(callback_query: types.CallbackQuery):
    await callback_query.answer('–û—Ç–ø—Ä–∞–≤–∏–ª –∫–Ω–æ–ø–∫—É –¥–æ–Ω–∞—Ç–∞')
    await callback_query.message.edit_text('–í—ã–±—Ä–∞–Ω–æ: –î–æ–Ω–∞—Ç –Ω–∞ 10 –∑–≤–µ–∑–¥')
    await callback_query.message.reply_invoice('–î–æ–Ω–∞—Ç', '10 –∑–≤—ë–∑–¥ –∑–∞ —Ä–∞–∑', 'donate',
                                               'XTR', [LabeledPrice(label='–î–æ–Ω–∞—Ç', amount=10)])


@router.message(lambda msg: msg.text == '–û—Ç–∑—ã–≤' or msg.text == 'Feedback')
async def feedback(message: Message):
    global keyboard_input
    keyboard_input[message.from_user.id] = 'feedback'
    await send_typing_indicator(message.chat.id, message.bot)
    await message.reply('_–ù–∞–ø–∏—à–∏—Ç–µ_ –í–∞—à –æ—Ç–∑—ã–≤', parse_mode="Markdown")


@router.message(F.voice)
async def voice_to_text(message: types.Message, bot: Bot):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç –∏—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ.
    –î–æ–±–∞–≤–ª–µ–Ω –Ω–µ–¥–µ–ª—å–Ω—ã–π –ª–∏–º–∏—Ç: 10 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–æ–∫ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ü—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å—á—ë—Ç –Ω–∞ 5 Stars.
    """
    download = None
    transcribe = None
    ogg_path = None
    wav_path = None
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –Ω–µ–¥–µ–ª—å–Ω—ã–π –ª–∏–º–∏—Ç
        user_id = message.from_user.id
        now = int(time.time())
        week_seconds = 7 * 24 * 60 * 60

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–¥–µ–ª–∏, –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω–∞
        start_ts = get_data(user_id, "voice_week_start_ts")
        if not isinstance(start_ts, int):
            start_ts = now
            save_data(user_id, "voice_week_start_ts", start_ts)

        # –°–±—Ä–æ—Å —Å—á—ë—Ç—á–∏–∫–∞, –µ—Å–ª–∏ –ø—Ä–æ—à–ª–∞ –Ω–µ–¥–µ–ª—è
        if now - start_ts >= week_seconds:
            save_data(user_id, "voice_counter", 0)
            start_ts = now
            save_data(user_id, "voice_week_start_ts", start_ts)

        counter = get_data(user_id, "voice_counter")
        if not isinstance(counter, int):
            counter = 0
            save_data(user_id, "voice_counter", counter)

        # –ï—Å–ª–∏ –ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—á—ë—Ç –∏ –≤—ã—Ö–æ–¥–∏–º
        if counter >= 10:
            await message.reply_invoice(
                title="–õ–∏–º–∏—Ç —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–æ–∫",
                description="–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ 10 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–æ–∫ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ. –ö—É–ø–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∑–∞ 5 –ó–≤—ë–∑–¥.",
                payload=f"voice_limit_5_stars:{message.voice.file_id}",
                currency="XTR",
                prices=[LabeledPrice(label="Voice transcription", amount=5 if message.from_user.id != MY_CHAT_ID else 1)]
            )
            return

        # –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        voice_file = await bot.get_file(message.voice.file_id)
        ogg_path = f"voice_{voice_file.file_id}.ogg"
        download = await message.reply('–°–∫–∞—á–∏–≤–∞—é —Å–æ–æ–±—â–µ–Ω–∏–µ')
        await bot.download_file(voice_file.file_path, ogg_path)
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ OGG –≤ WAV, —Ç–∞–∫ –∫–∞–∫ SpeechRecognition –ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å WAV
        wav_path = ogg_path.replace('.ogg', '.wav')
        segment = await asyncio.to_thread(AudioSegment.from_file, ogg_path)
        await asyncio.to_thread(segment.export, wav_path, format="wav")
        asyncio.create_task(send_typing_indicator(message.chat.id, bot, wait=5))
        transcribe = await message.answer('–†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞—é...')
        # –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –∞—É–¥–∏–æ
        text = await asyncio.to_thread(_transcribe_wav, wav_path)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        await message.reply(f"–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {text}")
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
        save_data(user_id, "voice_counter", counter + 1)

    except sr.UnknownValueError:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å.")
    except Exception as e:
        await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    finally:
        try:
            if download:
                await download.delete()
        except Exception:
            pass
        try:
            if transcribe:
                await transcribe.delete()
        except Exception:
            pass
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        if ogg_path and os.path.exists(ogg_path):
            os.remove(ogg_path)
        if wav_path and os.path.exists(wav_path):
            os.remove(wav_path)


@router.inline_query()
async def inline_emojis(inline_query: types.InlineQuery):
    # –°–æ–∑–¥–∞—ë–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–º–æ–¥–∑–∏
    results = [
        InlineQueryResultArticle(
            id='1',
            title='üé≤ –ö—É–±–∏–∫',
            input_message_content=InputTextMessageContent(message_text='üé≤')
        ),
        InlineQueryResultArticle(
            id='2',
            title='üéØ –î–∞—Ä—Ç—Å',
            input_message_content=InputTextMessageContent(message_text='üéØ')
        ),
        InlineQueryResultArticle(
            id='3',
            title='üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª',
            input_message_content=InputTextMessageContent(message_text='üèÄ')
        ),
        InlineQueryResultArticle(
            id='4',
            title='üé≥ –ë–æ—É–ª–∏–Ω–≥',
            input_message_content=InputTextMessageContent(message_text='üé≥')
        ),
        InlineQueryResultArticle(
            id='5',
            title='‚öΩ –§—É—Ç–±–æ–ª',
            input_message_content=InputTextMessageContent(message_text='‚öΩ')
        ),
        InlineQueryResultArticle(
            id='6',
            title='üé∞ –°–ª–æ—Ç—ã',
            input_message_content=InputTextMessageContent(message_text='üé∞')
        )
    ]
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await inline_query.answer(results)


# ======== Main ========

async def main():
    bot = Bot(api_token_muziatikbot)
    dp = Dispatcher()
    dp.include_router(router)
    await dp.start_polling(bot)


# ======== Payments Handlers ========

@router.pre_checkout_query()
async def pre_checkout_handler(pre_checkout_query: types.PreCheckoutQuery, bot: Bot):
    try:
        await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)
    except Exception:
        try:
            await bot.answer_pre_checkout_query(
                pre_checkout_query.id,
                ok=False,
                error_message="–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–ø–ª–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except Exception:
            pass


@router.message(F.successful_payment)
async def successful_payment_handler(message: types.Message, bot: Bot):
    payload = (message.successful_payment.invoice_payload or "")

    async def refund_and_notify(reason: str):
        # Try to refund Stars and notify the user
        charge_id = None
        try:
            charge_id = message.successful_payment.telegram_payment_charge_id
        except Exception:
            pass
        if charge_id:
            try:
                await bot.refund_star_payment(
                    user_id=message.from_user.id,
                    telegram_payment_charge_id=charge_id
                )
                await message.answer(f"{reason}\n–°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã.")
            except Exception as e:
                await message.answer(
                    f"{reason}\n–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–µ—Ä–Ω—É—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π. –û—à–∏–±–∫–∞: {e}")
        else:
            await message.answer(
                f"{reason}\n–ù–µ –Ω–∞–π–¥–µ–Ω –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")

    if not payload.startswith("voice_limit_5_stars:"):
        if payload == "donate":
            await message.reply(
                '–°–ø–∞—Å–∏–±–æ! –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ 10 –∑–≤—ë–∑–¥, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –æ–ø–ª–∞—Ç—ã –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑.')
        return
    voice_file_id = payload.split(":", 1)[1].strip() if ":" in payload else ""
    if not voice_file_id:
        await refund_and_notify("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã.")
        return

    download = None
    transcribe_msg = None
    ogg_path = None
    wav_path = None
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ file_id –∏–∑ payload
        voice_file = await bot.get_file(voice_file_id)
        ogg_path = f"voice_{voice_file.file_id}.ogg"
        download = await message.reply('–°–∫–∞—á–∏–≤–∞—é –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –≥–æ–ª–æ—Å')
        await bot.download_file(voice_file.file_path, ogg_path)

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º OGG –≤ WAV
        wav_path = ogg_path.replace('.ogg', '.wav')
        segment = await asyncio.to_thread(AudioSegment.from_file, ogg_path)
        await asyncio.to_thread(segment.export, wav_path, format="wav")

        asyncio.create_task(send_typing_indicator(message.chat.id, bot, wait=5))
        transcribe_msg = await message.answer('–†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞—é (–æ–ø–ª–∞—á–µ–Ω–æ)...')

        # –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º
        text = await asyncio.to_thread(_transcribe_wav, wav_path)
        await message.reply(f"–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (–æ–ø–ª–∞—á–µ–Ω–æ): {text}")

        # –ü–ª–∞—Ç–Ω–∞—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ ‚Äî —Å—á—ë—Ç—á–∏–∫ –Ω–µ –∏–∑–º–µ–Ω—è–µ–º
    except sr.UnknownValueError:
        await refund_and_notify("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å –ø–æ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é.")
    except Exception as e:
        await refund_and_notify(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    finally:
        try:
            if download:
                await download.delete()
        except Exception:
            pass
        try:
            if transcribe_msg:
                await transcribe_msg.delete()
        except Exception:
            pass
        if ogg_path and os.path.exists(ogg_path):
            os.remove(ogg_path)
        if wav_path and os.path.exists(wav_path):
            os.remove(wav_path)


@router.message()
async def everything(message: Message, bot: Bot):
    if keyboard_input.get(message.from_user.id) == 'name':
        save_data(message.from_user.id, "name", message.text)
        del keyboard_input[message.from_user.id]
        await message.answer(f'–ó–∞–ø–æ–º–Ω–∏–ª! –¢–µ–ø–µ—Ä—å –≤—ã ‚Äî {message.text}')
    elif keyboard_input.get(message.from_user.id) == 'feedback':
        await message.answer('–ü–∏—à—É –º–æ–µ–º—É —Å–æ–∑–¥–∞—Ç–µ–ª—é')
        await send_typing_indicator(message.from_user.id, bot)
        await bot.send_message(MY_CHAT_ID, f'–•–æ–∑—è–∏–Ω, —É —Ç–µ–±—è –æ—Ç–∑—ã–≤.\n{message.text}')
        await message.reply('–ù–∞–ø–∏—Å–∞–ª')
        await send_typing_indicator(message.from_user.id, bot)
        await message.answer('–ö—Å—Ç–∞—Ç–∏, —Å–∫–æ—Ä–æ —É –æ—Ç–∑—ã–≤–æ–≤ –±—É–¥—É—Ç —Å–≤–æ–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ãüîú')
        del keyboard_input[message.from_user.id]
    elif keyboard_input.get(message.from_user.id) == 'remember':
        asyncio.create_task(send_typing_indicator(message.chat.id, bot, wait=3))
        if len(message.text.split()) == 2:
            save_data(message.from_user.id, message.text.split()[0], message.text.split()[1])
            await message.answer(f'–ó–∞–ø–æ–º–Ω–∏–ª!\n'
                                 f'{message.text.split()[0]} ‚Äî {message.text.split()[1]}')
        else:
            await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–æ–≤–Ω–æ –¥–≤–∞ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª')
        del keyboard_input[message.from_user.id]
    elif keyboard_input.get(message.from_user.id) == 'forget':
        asyncio.create_task(send_typing_indicator(message.chat.id, bot, wait=2))
        del keyboard_input[message.from_user.id]
        if message.text.lower() == '–≤—Å—ë' or message.text.lower() == '–≤—Å–µ':
            delete_data(message.from_user.id)
            await message.reply('–£–¥–∞–ª–∏–ª –≤–∞—Å –∏–∑ –±–∞–∑—ãü•∏')
            return
        if message.text.lower() not in get_data(message.from_user.id):
            await message.answer('–¢–∞–∫–æ–≥–æ –∫–ª—é—á–∞ –Ω–µ—Ç')
            return
        delete_data(message.from_user.id, message.text)
        await message.answer(f'–£–¥–∞–ª–∏–ª –∫–ª—é—á {message.text} –∏ –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ')
    else:
        await message.reply(
            '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞), –∞ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç: –Ω–∞–∂–º–∏—Ç–µ 4 –∫–≤–∞–¥—Ä–∞—Ç–∞ —Å–ª–µ–≤–∞ –æ—Ç —Å–∫—Ä–µ–ø–∫–∏')


if __name__ == "__main__":
    asyncio.run(main())
