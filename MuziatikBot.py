"""
This is a legacy version of MuziatikBot!
The new version is bot.py


A bot that interacts with users to provide reminders, cat-related media, personalized greetings,
and enables controlled access to a virtual "house". The bot uses the aiogram framework for
Telegram Bot API integration.

Modules included:
- aiogram: Provides bot-building capabilities.
- apscheduler: Schedules background tasks.
- dotenv: Loads environment variables from a .env file.
- asyncio: Handles asynchronous tasks.
- Other supporting modules for threading, randomization, and HTTP requests.

Exported functions:
- process_start_command: Welcomes the user upon issuing the "start" command.
- my_name: Replies with the user's Telegram display name and username.
- cats: Shares randomized cat-related media.
- home: Initiates interaction for controlled house entry/exit with user approval.
- may_go_house: Handles inline keyboard callbacks confirming house entry/exit.
- go_house: Completes the interaction related to guest house entry/exit.

The bot is designed to be conversational and execute tasks based on user interaction.
"""

import asyncio
import datetime
import os
import random
import threading
import time

import requests
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from dotenv import load_dotenv
from parser import get_flowers, cats_url
from apscheduler.schedulers.asyncio import AsyncIOScheduler

scheduler = AsyncIOScheduler()
load_dotenv()
button1 = KeyboardButton(text='–ü–æ—Å—Ç–∞–≤—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ')
button2 = KeyboardButton(text='–ö–æ—Ç–∏–∫–∏!')
button3 = KeyboardButton(text='–ö–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç?')
button4 = KeyboardButton(text='–î–æ–º–∏–∫')
button5 = KeyboardButton(text='–û—Ç–∑—ã–≤')
keyboard = ReplyKeyboardMarkup(keyboard=[[button1, button2],
                                         [button3, button4],
                                         [button5]],
                               resize_keyboard=True)
inline_dima = InlineKeyboardButton(text='–î–ª—è –î–∏–º—ã', callback_data='–î–ª—è –î–∏–º—ã')
inline_dad = InlineKeyboardButton(text='–î–ª—è Co–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞',
                                  callback_data='–î–ª—è Co–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞')
inline_mom = InlineKeyboardButton(text='–î–ª—è –ê–ª—ë–Ω—ã', callback_data='–î–ª—è –ê–ª—ë–Ω—ã')
inline_granny = InlineKeyboardButton(text='–î–ª—è –ù–∞—Ç–∞—à–∏',
                                     callback_data='–î–ª—è –ù–∞—Ç–∞—à–∏')
yes = InlineKeyboardButton(text='–¥–∞', callback_data='–¥–∞')
no = InlineKeyboardButton(text='–Ω–µ—Ç', callback_data='–Ω–µ—Ç')
inline_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[[inline_dima, inline_mom],
                     [inline_dad, inline_granny]])
yes_no = InlineKeyboardMarkup(inline_keyboard=[[yes, no]])
API_TOKEN_muziatikBot = os.getenv('API_TOKEN_muziatikBot')
MY_CHAT_ID = os.getenv('MY_CHAT_ID')
bot = Bot(API_TOKEN_muziatikBot)
dp = Dispatcher()

# bot.send_message(os.getenv('MY_CHAT_ID'),
#                  '_–ù–æ–≤–æ—Å—Ç–∏:_\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–µ–π—á–∞—Å '
#                  '–Ω–µ–æ—á–µ–Ω—å —É–¥–æ–±–Ω–æ(–º–æ–≥—É—Ç –±—ã—Ç—å –æ—à–∏–±–∫–∏):(. –ù–æ –≤—ã –º–æ–∂–µ—Ç–µ –≤—Å—ë '
#                  '—Ä–∞–≤–Ω–æ –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å:)! –ï—Å–ª–∏ –≤ –∫–æ–Ω—Ü–µ –±–æ—Ç –Ω–µ –Ω–∞–ø–∏—Å–∞–ª '
#                  '"–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ", –∑–Ω–∞—á–∏—Ç –∫—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–π, –∏–ª–∏ –≤—ã '
#                  '–ø–æ—Å—Ç–∞–≤–∏–ª–∏ –¥—Ä—É–≥–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –∏ –Ω–æ–≤–æ–µ –Ω–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—Å—è.',
#                  parse_mode="Markdown")
# bot.send_message(os.getenv('MOMMY_CHAT_ID'),
#                  '_–ù–æ–≤–æ—Å—Ç–∏:_\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–µ–π—á–∞—Å '
#                  '–Ω–µ–æ—á–µ–Ω—å —É–¥–æ–±–Ω–æ(–º–æ–≥—É—Ç –±—ã—Ç—å –æ—à–∏–±–∫–∏):(. –ù–æ –≤—ã –º–æ–∂–µ—Ç–µ –≤—Å—ë '
#                  '—Ä–∞–≤–Ω–æ –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å:)! –ï—Å–ª–∏ –≤ –∫–æ–Ω—Ü–µ –±–æ—Ç –Ω–µ –Ω–∞–ø–∏—Å–∞–ª '
#                  '"–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ", –∑–Ω–∞—á–∏—Ç –∫—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–π, –∏–ª–∏ –≤—ã '
#                  '–ø–æ—Å—Ç–∞–≤–∏–ª–∏ –¥—Ä—É–≥–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –∏ –Ω–æ–≤–æ–µ –Ω–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—Å—è.',
#                  parse_mode="Markdown")
# bot.send_message(os.getenv('DADDY_CHAT_ID'),
#                  '_–ù–æ–≤–æ—Å—Ç–∏:_\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–µ–π—á–∞—Å '
#                  '–Ω–µ–æ—á–µ–Ω—å —É–¥–æ–±–Ω–æ(–º–æ–≥—É—Ç –±—ã—Ç—å –æ—à–∏–±–∫–∏):(. –ù–æ –≤—ã –º–æ–∂–µ—Ç–µ –≤—Å—ë '
#                  '—Ä–∞–≤–Ω–æ –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å:)! –ï—Å–ª–∏ –≤ –∫–æ–Ω—Ü–µ –±–æ—Ç –Ω–µ –Ω–∞–ø–∏—Å–∞–ª '
#                  '"–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ", –∑–Ω–∞—á–∏—Ç –∫—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–π, –∏–ª–∏ –≤—ã '
#                  '–ø–æ—Å—Ç–∞–≤–∏–ª–∏ –¥—Ä—É–≥–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –∏ –Ω–æ–≤–æ–µ –Ω–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—Å—è.',
#                  parse_mode="Markdown")
# bot.send_message(os.getenv('GRANNY_CHAT_ID'),
#                  '_–ù–æ–≤–æ—Å—Ç–∏:_\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–µ–π—á–∞—Å '
#                  '–Ω–µ–æ—á–µ–Ω—å —É–¥–æ–±–Ω–æ(–º–æ–≥—É—Ç –±—ã—Ç—å –æ—à–∏–±–∫–∏):(. –ù–æ –≤—ã –º–æ–∂–µ—Ç–µ –≤—Å—ë '
#                  '—Ä–∞–≤–Ω–æ –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å:)! –ï—Å–ª–∏ –≤ –∫–æ–Ω—Ü–µ –±–æ—Ç –Ω–µ –Ω–∞–ø–∏—Å–∞–ª '
#                  '"–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ", –∑–Ω–∞—á–∏—Ç –∫—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–π, –∏–ª–∏ –≤—ã '
#                  '–ø–æ—Å—Ç–∞–≤–∏–ª–∏ –¥—Ä—É–≥–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –∏ –Ω–æ–≤–æ–µ –Ω–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—Å—è.',
#                  parse_mode="Markdown")
# bot.send_message(os.getenv('ALYONA_CHAT_ID'),
#                  '–í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:(', parse_mode="Markdown")

is_ = None


@dp.message(Command(commands=["start"]))
async def process_start_command(message: Message):
    await message.answer('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!')


@dp.message(lambda msg: msg.text == '–ö–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç?')
async def my_name(message: Message):
    await message.reply(
        f'–í–∞—Å –∑–æ–≤—É—Ç _{message.chat.first_name}_\n–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è(username) '
        f'‚Äî __{message.chat.username}__',
        reply_markup=keyboard, parse_mode='Markdown')


@dp.message(lambda msg: msg.text == '–ö–æ—Ç–∏–∫–∏!')
async def cats(message: Message):
    await message.reply_photo(cats_url(),
                              reply_markup=keyboard)


who_will_go_house = None


@dp.message(lambda msg: msg.text == '–î–æ–º–∏–∫')
async def home(message: Message):
    global who_will_go_house
    who_will_go_house = message.chat.id
    await message.reply(
        '–í—ã —Ö–æ—Ç–∏—Ç–µ _–≤–æ–π—Ç–∏/–≤—ã–π—Ç–∏_ _–≤/–∏–∑_ –¥–æ–º–∏–∫_(–∞)_ *–ú—É–∑—è—Ç–∏–∫–∞*?',
        parse_mode='Markdown',
        reply_markup=yes_no)


@dp.callback_query(F.data.in_(['–¥–∞']))
async def may_go_house(callback: CallbackQuery):
    await callback.answer(text='–û–∫! –°–µ–π—á–∞—Å!')
    await bot.send_message(callback.message.chat.id,
                           '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ‚Ä¶'
                           '\n'
                           '\n'
                           '–ï—Å–ª–∏ –î–∏–º–∞ –Ω–∞–∂–º—ë—Ç *–Ω–µ—Ç* ‚Äî –Ø –Ω–∏—á–µ–≥–æ –≤–∞–º –Ω–µ –æ—Ç–≤–µ—á—É, '
                           '–∞ –µ—Å–ª–∏ –î–∏–º–∞ –Ω–∞–∂–º—ë—Ç *–¥–∞* ‚Äî —Ç–æ-–æ-–æ‚Ä¶\n'
                           '–°–∞–º–∏ —É–≤–∏–¥–∏—Ç–µüòÅÔ∏è', parse_mode='Markdown')
    await bot.send_message(MY_CHAT_ID,
                           '–•–æ—á–µ—à—å –ª–∏ —Ç—ã, '
                           '—á—Ç–æ–±—ã –∫—Ç–æ-—Ç–æ –≤–æ—à–µ–ª –≤ —Ç–≤–æ–π –¥–æ–º–∏–∫?')
    await bot.send_message(os.getenv('MY_CHAT_ID'), '–ù–∞–ø–∏—à–∏ _–¥–∞_ –∏–ª–∏ _–Ω–µ—Ç_',
                           parse_mode='Markdown')


guest = False


@dp.message(F.text.regexp(r'[–¥–î][–ê–∞]'))
async def go_house(message: Message):
    global guest
    await message.reply('–ì–æ—Å—Ç–∏!')
    guest = True if not guest else False
    print(guest)
    await bot.send_message(who_will_go_house, '–û—Ç–∫—Ä—ã—Ç–∏–µ –î–æ–º–∏–∫–∞‚Ä¶')
    await bot.send_message(MY_CHAT_ID, '–û—Ç–∫—Ä—ã—Ç–∏–µ –î–æ–º–∏–∫–∞‚Ä¶')
    await asyncio.sleep(5)
    await bot.send_message(who_will_go_house,
                           '–ú–æ–∂–µ—Ç–µ _–∑–∞—Ö–æ–¥–∏—Ç—å_ –≤ __–î–æ–º–∏–∫__' if guest is True
                           else '–ú–æ–∂–µ—Ç–µ _–≤—ã—Ö–æ–¥–∏—Ç—å_ –∏–∑ _–î–æ–º–∏–∫–∞_',
                           parse_mode='Markdown')
    await bot.send_message(MY_CHAT_ID,
                           '–ú–æ–∂–µ—Ç–µ _–∑–∞—Ö–æ–¥–∏—Ç—å_ –≤ __–î–æ–º–∏–∫__' if guest is True
                           else '–ú–æ–∂–µ—Ç–µ _–≤—ã—Ö–æ–¥–∏—Ç—å_ –∏–∑ _–î–æ–º–∏–∫–∞_',
                           parse_mode='Markdown')
    await asyncio.sleep(3)
    close = await bot.send_message(who_will_go_house,
                                   '–î–≤–µ—Ä–∏ –î–æ–º–∏–∫–∞ –∑–∞–∫—Ä–æ—é—Ç—Å—è —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥')
    close_my = await bot.send_message(MY_CHAT_ID,
                                      '–î–≤–µ—Ä–∏ –î–æ–º–∏–∫–∞ –∑–∞–∫—Ä–æ—é—Ç—Å—è —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥')
    for i in range(10, 0, -1):
        await asyncio.sleep(1)
        await bot.edit_message_text(text=f'–î–≤–µ—Ä–∏ –î–æ–º–∏–∫–∞ –∑–∞–∫—Ä–æ—é—Ç—Å—è —á–µ—Ä–µ–∑ {i} '
                                         f'—Å–µ–∫—É–Ω–¥',
                                    chat_id=who_will_go_house,
                                    message_id=close.message_id)
        await bot.edit_message_text(text=f'–î–≤–µ—Ä–∏ –î–æ–º–∏–∫–∞ –∑–∞–∫—Ä–æ—é—Ç—Å—è —á–µ—Ä–µ–∑ {i} '
                                         f'—Å–µ–∫—É–Ω–¥',
                                    chat_id=MY_CHAT_ID,
                                    message_id=close_my.message_id)
    await bot.send_message(who_will_go_house, '–ó–∞–∫—Ä—ã—Ç–∏–µ –¥–æ–º–∏–∫–∞‚Ä¶')
    await bot.send_message(MY_CHAT_ID, '–ó–∞–∫—Ä—ã—Ç–∏–µ –¥–æ–º–∏–∫–∞‚Ä¶')
    await asyncio.sleep(5)
    await bot.send_message(who_will_go_house, '–î–æ–º–∏–∫ –∑–∞–∫—Ä—ã—Ç!')
    await bot.send_message(MY_CHAT_ID, '–î–æ–º–∏–∫ –∑–∞–∫—Ä—ã—Ç!')


@dp.message(lambda msg: msg.text == '–û—Ç–∑—ã–≤')
async def feedback(message: Message):
    global is_
    is_ = 'feedback'
    await message.reply_photo(random.choice(get_flowers()))
    await message.reply(
        '_–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤_ –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ —è –Ω–∞–ø–∏—à—É "‚Ä¶"\n',
        parse_mode="Markdown",
        reply_markup=keyboard)
    await asyncio.sleep(3)
    await bot.send_message(message.chat.id, '‚Ä¶')


async def error(message: Message):
    await message.reply(f'{message.chat.first_name}, –¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –µ—â—ë –Ω–µ—Ç :(')


@dp.message(lambda msg: msg.text == '–ü–æ—Å—Ç–∞–≤—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ')
async def reminder(message: Message):
    await message.reply('–î–ª—è –∫–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ?',
                        reply_markup=inline_keyboard)


who = None


@dp.callback_query(
    F.data.in_(['–î–ª—è –î–∏–º—ã', '–î–ª—è –ê–ª—ë–Ω—ã', '–î–ª—è Co–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞', '–î–ª—è –ù–∞—Ç–∞—à–∏']))
async def what(callback: CallbackQuery):
    global is_
    global who
    is_ = 'reminder'
    inline_button = callback.data
    if callback.data == '–î–ª—è –î–∏–º—ã':
        await callback.answer(text='–û–∫. –î–ª—è –î–∏–º—ã')
        who = os.getenv('MY_CHAT_ID')
    elif callback.data == '–î–ª—è –ê–ª—ë–Ω—ã':
        who = os.getenv('MOMMY_CHAT_ID')
    elif callback.data == '–î–ª—è Co–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞':
        who = os.getenv('DADDY_CHAT_ID')
    elif callback.data == '–î–ª—è –ù–∞—Ç–∞—à–∏':
        who = os.getenv('GRANNY_CHAT_ID')
    await callback.message.edit_text('–û —á—ë–º –Ω–∞–ø–æ–º–Ω–∏—Ç—å?')
    await asyncio.sleep(3)
    await callback.message.delete()
    await bot.send_message(callback.message.chat.id, '–û —á—ë–º –Ω–∞–ø–æ–º–Ω–∏—Ç—å?')
    await callback.answer()


what_remind = None
when_remind = None


@dp.message()
async def just_text(message: Message):
    global is_
    global when_remind
    if is_ == 'feedback':
        await message.reply('–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ—Ç–∑—ã–≤‚Ä¶', reply_markup=keyboard)
        await asyncio.sleep(2)
        await bot.send_message(MY_CHAT_ID,
                               f'Feedback:\n'
                               f'Who?: {message.chat.first_name}\n'
                               f'Username: {message.chat.username}\n'
                               f'{message.text}')
        await asyncio.sleep(2)
        await message.reply('–û—Ç–∑—ã–≤ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!')
    elif is_ == 'reminder' and not message.text[0].isdigit():
        global what_remind
        what_remind = message.text
        print(f'what remind {what_remind}')
        await message.reply('–ö–æ–≥–¥–∞?')
        await asyncio.sleep(3)
        await bot.send_message(message.chat.id,
                               '–í —Ñ–æ—Ä–º–∞—Ç–µ:\n'
                               '–¥–¥.–º–º –ß–ß:–ú–ú\n'
                               '–ù–∞–ø—Ä–∏–º–µ—Ä:\n'
                               '31.08 23:59')
        await asyncio.sleep(3)
        await bot.send_message(message.chat.id,
                               '*–í–∞–∂–Ω–æ*! –°–∏–º–≤–æ–ª—ã: ":", "." –∏ –ø—Ä–æ–±–µ–ª '
                               '**–Ω–µ–ª—å–∑—è** –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å –∏–ª–∏ –∑–∞–º–µ–Ω—è—Ç—å!',
                               parse_mode='Markdown')
        # await message.reply(f'–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ _{what_remind}_ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ!',
        #                        parse_mode='Markdown')
    elif message.text[0].isdigit():
        await message.reply('–ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è‚Ä¶')
        await asyncio.sleep(2)
        await bot.send_message(message.chat.id, '–£–∑–Ω–∞—é —Ç–µ–∫—É—â–∏–π –≥–æ–¥‚Ä¶')
        await asyncio.sleep(3)
        year = int(datetime.datetime.now().strftime('%y'))
        await bot.send_message(message.chat.id, '–£–∑–Ω–∞—é –Ω—É–∂–Ω—ã–π –º–µ—Å—è—Ü‚Ä¶')
        await asyncio.sleep(3)
        month = int(message.text[4])
        await bot.send_message(message.chat.id, '–£–∑–Ω–∞—é –Ω—É–∂–Ω—ã–π –¥–µ–Ω—å‚Ä¶')
        await asyncio.sleep(3)
        day = int(message.text[:2])
        await bot.send_message(message.chat.id, '–£–∑–Ω–∞—é –Ω—É–∂–Ω—ã–π —á–∞—Å‚Ä¶')
        await asyncio.sleep(3)
        hour = int(message.text[-5:-3])
        await bot.send_message(message.chat.id, '–£–∑–Ω–∞—é –Ω—É–∂–Ω—É—é –º–∏–Ω—É—Ç—É‚Ä¶')
        await asyncio.sleep(3)
        minute = int(message.text[-2:])
        # await scheduler.add_job(send_rm, "date",
        #                         run_date=datetime.datetime(
        #                             year=2024, month=month, day=day, hour=hour,
        #                             minute=minute, second=0), args=(message,))
        when_remind = {'month': month, 'day': day, 'hour': hour,
                       'minute': minute,
                       'message': message}
        await bot.send_message(message.chat.id,
                               f'–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ‚Äî {what_remind},'
                               f' –Ω–∞ __{message.text}__ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ!',
                               parse_mode='Markdown')
    else:
        await error(message)


async def send_rm(message):
    await bot.send_message(who, f'–ù–∞–ø–æ–º–∏–Ω–∞—é: _{what_remind}_',
                           parse_mode='Markdown')
    await scheduler.remove_all_jobs()


if when_remind is not None:
    scheduler.add_job(send_rm, "date",
                      run_date=datetime.datetime(
                          year=2024,
                          month=when_remind['month'],
                          day=when_remind['day'],
                          hour=when_remind['hour'],
                          minute=when_remind['minute'],
                          second=0),
                      args=(when_remind['message'],))
    scheduler.start()
dp.run_polling(bot, polling_timeout=10)
